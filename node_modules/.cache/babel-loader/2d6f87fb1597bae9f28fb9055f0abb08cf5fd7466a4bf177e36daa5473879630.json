{"ast":null,"code":"var _jsxFileName = \"/Users/Alaina/projects/redux-test-project-2/src/App.js\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport Notification from './components/UI/Notification';\nimport { sendCartData } from './store/cart-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isInitial = true;\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification);\n\n  //fetches cart data if page is loading initially\n  use;\n\n  //watch for changes in cart state\n  useEffect(() => {\n    //if the cart is just being loaded, no cart data will be sent. only does this once!\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n    ;\n    dispatch(sendCartData(cart));\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {\n      status: notification.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [showCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ym533N9pcV2ZQROugfAj7yssIY8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = App;\nexport default App;\n\n/* NOTE: using a 'PUT' request will override the cart of existing \ndata with the incoming data */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useSelector","useDispatch","Cart","Layout","Products","Notification","sendCartData","isInitial","App","dispatch","showCart","state","ui","cartIsVisible","cart","notification","use","status","title","message"],"sources":["/Users/Alaina/projects/redux-test-project-2/src/App.js"],"sourcesContent":["import { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport Notification from './components/UI/Notification';\nimport { sendCartData } from './store/cart-actions';\n\nlet isInitial = true; \n\nfunction App() {\n  const dispatch = useDispatch();\n  const showCart = useSelector((state) => state.ui.cartIsVisible);\n  const cart = useSelector((state) => state.cart);\n  const notification = useSelector((state) => state.ui.notification);\n\n  //fetches cart data if page is loading initially\n  use\n\n  //watch for changes in cart state\n  useEffect(() => {\n    //if the cart is just being loaded, no cart data will be sent. only does this once!\n    if (isInitial) {\n      isInitial = false;\n      return;\n    };\n\n    dispatch(sendCartData(cart));\n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && (\n        <Notification\n          status={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n      <Layout>\n        {showCart && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n/* NOTE: using a 'PUT' request will override the cart of existing \ndata with the incoming data */\n\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,SAASC,YAAY,QAAQ,sBAAsB;AAAC;AAEpD,IAAIC,SAAS,GAAG,IAAI;AAEpB,SAASC,GAAG,GAAG;EAAA;EACb,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAMS,QAAQ,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACC,aAAa,CAAC;EAC/D,MAAMC,IAAI,GAAGd,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACG,IAAI,CAAC;EAC/C,MAAMC,YAAY,GAAGf,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACG,YAAY,CAAC;;EAElE;EACAC,GAAG;;EAEH;EACAjB,SAAS,CAAC,MAAM;IACd;IACA,IAAIQ,SAAS,EAAE;MACbA,SAAS,GAAG,KAAK;MACjB;IACF;IAAC;IAEDE,QAAQ,CAACH,YAAY,CAACQ,IAAI,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACA,IAAI,EAAEL,QAAQ,CAAC,CAAC;EAEpB,oBACE,QAAC,QAAQ;IAAA,WACNM,YAAY,iBACX,QAAC,YAAY;MACX,MAAM,EAAEA,YAAY,CAACE,MAAO;MAC5B,KAAK,EAAEF,YAAY,CAACG,KAAM;MAC1B,OAAO,EAAEH,YAAY,CAACI;IAAQ;MAAA;MAAA;MAAA;IAAA,QAEjC,eACD,QAAC,MAAM;MAAA,WACJT,QAAQ,iBAAI,QAAC,IAAI;QAAA;QAAA;QAAA;MAAA,QAAG,eACrB,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEf;AAAC,GAnCQF,GAAG;EAAA,QACOP,WAAW,EACXD,WAAW,EACfA,WAAW,EACHA,WAAW;AAAA;AAAA,KAJzBQ,GAAG;AAqCZ,eAAeA,GAAG;;AAElB;AACA;AADA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}