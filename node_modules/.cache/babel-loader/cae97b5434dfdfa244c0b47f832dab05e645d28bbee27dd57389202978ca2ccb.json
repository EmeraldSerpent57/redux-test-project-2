{"ast":null,"code":"var _jsxFileName = \"/Users/Alaina/projects/redux-test-project-2/src/App.js\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { uiActions } from './store/ui-slice';\nimport Notification from './components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification);\n\n  //watch for changes in cart state\n  useEffect(() => {\n    const sendCartData = async () => {\n      //shows first that the data in the cart is pending being sent\n      dispatch(uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data now!\"\n      }));\n      //then we send the data to the firebase backend\n      const response = await fetch(\"https://redux-test-project-2-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      //is there an error?\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed!\");\n      }\n\n      //notification that data send was successful\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Cart data has been sent successfully!\"\n      }));\n    };\n\n    //catch any error that may have occurred and show error message\n    sendCartData().catch(error => {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!\"\n      }));\n    });\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [showCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ym533N9pcV2ZQROugfAj7yssIY8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = App;\nexport default App;\n\n/* NOTE: using a 'PUT' request will override the cart of existing \ndata with the incoming data */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useSelector","useDispatch","Cart","Layout","Products","uiActions","Notification","App","dispatch","showCart","state","ui","cartIsVisible","cart","notification","sendCartData","showNotification","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","catch","error"],"sources":["/Users/Alaina/projects/redux-test-project-2/src/App.js"],"sourcesContent":["import { Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { uiActions } from './store/ui-slice';\nimport Notification from './components'\n\nfunction App() {\n  const dispatch = useDispatch();\n  const showCart = useSelector((state) => state.ui.cartIsVisible);\n  const cart = useSelector((state) => state.cart);\n  const notification = useSelector((state) => state.ui.notification);\n\n  //watch for changes in cart state\n  useEffect(() => {\n    const sendCartData = async () => {\n      //shows first that the data in the cart is pending being sent\n      dispatch(\n        uiActions.showNotification({\n          status: \"pending\",\n          title: \"Sending...\",\n          message: \"Sending cart data now!\",\n        })\n      );\n      //then we send the data to the firebase backend\n      const response = await fetch(\n        \"https://redux-test-project-2-default-rtdb.firebaseio.com/cart.json\",\n        { method: \"PUT\", body: JSON.stringify(cart) }\n      );\n\n      //is there an error?\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed!\");\n      }\n\n      //notification that data send was successful\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Cart data has been sent successfully!\",\n        })\n      );\n    };\n\n    //catch any error that may have occurred and show error message\n    sendCartData().catch((error) => {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!\",\n        })\n      );\n    });\n  }, [cart, dispatch]);\n\n  return (\n    <Fragment>\n      <Notification />\n      <Layout>\n        {showCart && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n\n/* NOTE: using a 'PUT' request will override the cart of existing \ndata with the incoming data */\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,cAAc;AAAA;AAEvC,SAASC,GAAG,GAAG;EAAA;EACb,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAMQ,QAAQ,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACC,aAAa,CAAC;EAC/D,MAAMC,IAAI,GAAGb,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACG,IAAI,CAAC;EAC/C,MAAMC,YAAY,GAAGd,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACG,YAAY,CAAC;;EAElE;EACAf,SAAS,CAAC,MAAM;IACd,MAAMgB,YAAY,GAAG,YAAY;MAC/B;MACAP,QAAQ,CACNH,SAAS,CAACW,gBAAgB,CAAC;QACzBC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,YAAY;QACnBC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACD;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oEAAoE,EACpE;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI;MAAE,CAAC,CAC9C;;MAED;MACA,IAAI,CAACO,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;;MAEA;MACAnB,QAAQ,CACNH,SAAS,CAACW,gBAAgB,CAAC;QACzBC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,UAAU;QACjBC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;IACH,CAAC;;IAED;IACAJ,YAAY,EAAE,CAACa,KAAK,CAAEC,KAAK,IAAK;MAC9BrB,QAAQ,CACNH,SAAS,CAACW,gBAAgB,CAAC;QACzBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACN,IAAI,EAAEL,QAAQ,CAAC,CAAC;EAEpB,oBACE,QAAC,QAAQ;IAAA,wBACP,QAAC,YAAY;MAAA;MAAA;MAAA;IAAA,QAAG,eAChB,QAAC,MAAM;MAAA,WACJC,QAAQ,iBAAI,QAAC,IAAI;QAAA;QAAA;QAAA;MAAA,QAAG,eACrB,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEf;AAAC,GA3DQF,GAAG;EAAA,QACON,WAAW,EACXD,WAAW,EACfA,WAAW,EACHA,WAAW;AAAA;AAAA,KAJzBO,GAAG;AA6DZ,eAAeA,GAAG;;AAGlB;AACA;AADA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}